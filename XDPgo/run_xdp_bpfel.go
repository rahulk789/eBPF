// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadRun_xdp returns the embedded CollectionSpec for run_xdp.
func loadRun_xdp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Run_xdpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load run_xdp: %w", err)
	}

	return spec, err
}

// loadRun_xdpObjects loads run_xdp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *run_xdpObjects
//     *run_xdpPrograms
//     *run_xdpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadRun_xdpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadRun_xdp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// run_xdpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type run_xdpSpecs struct {
	run_xdpProgramSpecs
	run_xdpMapSpecs
}

// run_xdpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type run_xdpProgramSpecs struct {
	XdpFilter *ebpf.ProgramSpec `ebpf:"xdp_filter"`
}

// run_xdpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type run_xdpMapSpecs struct {
}

// run_xdpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadRun_xdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type run_xdpObjects struct {
	run_xdpPrograms
	run_xdpMaps
}

func (o *run_xdpObjects) Close() error {
	return _Run_xdpClose(
		&o.run_xdpPrograms,
		&o.run_xdpMaps,
	)
}

// run_xdpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadRun_xdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type run_xdpMaps struct {
}

func (m *run_xdpMaps) Close() error {
	return _Run_xdpClose()
}

// run_xdpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadRun_xdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type run_xdpPrograms struct {
	XdpFilter *ebpf.Program `ebpf:"xdp_filter"`
}

func (p *run_xdpPrograms) Close() error {
	return _Run_xdpClose(
		p.XdpFilter,
	)
}

func _Run_xdpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed run_xdp_bpfel.o
var _Run_xdpBytes []byte
